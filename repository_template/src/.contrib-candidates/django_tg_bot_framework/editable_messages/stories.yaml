# TODO Контент-менеджер -- Скопировать шаблон из озного бота в другой: !func
#    dev --> producion: !story


# TODO Контент-менеджер -- Отредактировать шаблон сообщения: !func
# Чтобы не мешало форматированию через урезанный Markdown-синтаксис
# Чтобы не мешало форматированию через урезанную HTML-разметку
# С рендером на JS
# С рендером на Python
# С подсветкой синтаксиса к Ace или Monako
# С "вариантами" или условиями
# С кастомными фильтрами
# Не приводит к лишним переносам строк
# Отключить шаблонизатор для вставок кода
# С экранированием HTML, если тип текста HTML
# С экранированием Markdown через слэш, если тип Markdown
# TODO Какие часто используемые теги Mako нужны в стандартной поставке Editable Messages
# TODO Несоответствует схеме --> отказ

# Контент-менеджер -- Проверить отображение серии сообщений в клиенте Tg: !func
#   Серия с шаблонами
#   Серия для ещё не реализованных состояний чат-бота
#   Серия с кнопками


# TODO Контент-менеджер -- Отредактировать кнопки в серии сообщений: !func
#   Новая кастомная кнопка со ссылкой, не предусмотренная сообщением
#   Переставить кнопка слева направо для правостороннего письма
#   Переставить кнопка сверху вниз

# TODO Сис. админ -- Проверить перед обновлением ПО, что присутствует полный набор текстовок: !func


# Контент-менеджер -- Узнать как пользоваться шаблонизатором: !func

# TODO Контент-менеджер -- Перевести текстовки в БД на новый язык: !func

# TODO Контент-менеджер -- Отредактировать сообщение через Telegram: 
#   Тестирую бота --> заметил опечатку --> хочу отредактировать сообщение прямо через Telegram без захода в админку
#   HTML-сообщение
#   С кнопками
#   На нескольких языках
#   С шаблоном


# TODO Программист -- Подключить редактируемые сообщения: !func
#    private chat
#    group chat
#    В кастомном решении без стейт-машин
#    Несколько разных Message Router

# TODO Программист -- Покрыть код автотестами: !func


# TODO Программист -- Локализовать чиcла в шаблонизаторе: !func
#    Русский: !story
#    Английский: !story
#    Китайский: !story
#    Новый язык, который ещё не завести в Django Tg Bot Framework

# TODO Программист -- Локализовать даты в шаблонизаторе: !func
#    Русский: !story
#    Английский: !story
#    Китайский: !story
#    Новый язык, который ещё не завести в Django Tg Bot Framework

# TODO Программист -- Перевести интерфейс в админке на местный язык: !func
#    Русский: !story
#    Английский: !story
#    Китайский: !story
#    Новый язык, который ещё не завести в Django Tg Bot Framework


# TODO Программист -- Подключить редактируемые сообщения в свой проект: !func
#   Несколько разных чат-ботов в одном веб-приложении Django: !story


# Появилось несколько фича-реквестов для лучшей интеграции Editable Messages c Live Notifications
# Пускай Editable Messages хранят в БД не JSON с кучей разных опциональных данных для отправки запроса, а только отдельные поля с исходными данными: текст, картинка, кнопки, etc. Это нужно, чтобы отделить формирование HTTP запросов от самих текстовок в БД. Для живых уведомлений будет минимум два альтернативных способа сгенерировать HTTP запросы: отправить новые сообщение и отредактировать старые.
# Ещё будет круто, если для Editable Messages появится ещё одна схема в дополнении к схеме контекста и схеме кнопок — схема параметров. Пригодится, чтобы для серии можно было задать набор галочек, кнопок, текстовок — набор параметров, доступных контент-менеджеру в админке для тонкой настройки серии и алгоритма её отправки пользовтелю. Например, это может быть параметр "parse_mode" с доступными значениями markdownv1 и markdownv2. Или это может быть "protect_content", "disable_notification" и тому подобные настройки.
# Набор доступных настроек должен быть определён схемой подобно схеме контекста. В норме, это должно происходить в коде внутри стейта.
# В БД набор выбранных параметров будет храниться в виде JSON. Видимо, прикреплены они должны быть к серии, а не к отдельным сообщениям.


# TODO Подсветка синтаксиса шаблонизатора в редакторе в админке
# TODO Подсветка синтаксиса Markdown v2 в редакторе в админке


# TODO Запрещаем подключить Editable Messages к Django сразу в двух экземплярах?
# Даже если в одном Django проекте живёт два разных чат-бота, то текстовки для этих двух ботов будут в одном приложении Editable Messages?

# TODO Запрещаем кастомить модель данных Editable Messages? Запрещаем добавлять свои кастомные виджеты?


# TODO Программист -- Поставить набор дефолтных текстовок вместе с кодом (фикстуры)
# TODO Контент-менеджер -- Создать кастомную текстовку из дефолтной, что была пославлена вместе с кодом (фикстуры)


# TODO Администратор -- Выкатить свежую версию ПО с изменениями в схеме сообщений на production
# Сначала подготовка данных, затем только деплой ПО:
# - Сначала в CMS заводятся новые текстовки на всех языках
# - Затем обкатывается новая версия чат-бота в local и dev-окружениях и на всех языках
# - Выкатывается свежая версия ПО
# - В CMS выискиваются и удаляются старые ненужные текстовки, картинки, etc


# TODO Контент-менеджер -- Добавить в клавиатуру кнопку перехода в другой стейт
# TODO Контент-менеджер -- Поменять порядок кнопок в сообщении
# TODO Контент-менеджер -- Поменять надписи на кнопках сообщения
# TODO Контент-менеджер -- Перенести текстовки, подготовленные в другой БД
# TODO Контент-менеджер -- Подготовить текстовки для новой версии ПО, пока работает старая версия бота
# TODO Администратор -- Обновить ПО на сервере с сохранением работы контент-менеджеров
# TODO Администратор -- Запустить параллельно старую и новую версии бота на время выкатки обновления в k8s
# TODO Программист -- Автоматически залить новую схему сообщений при выкатке в dev-окружении
# TODO Программист -- Выбрать схему сообщений в БД CMS для бота при деплое
# TODO Программист -- Автоматически проверить схему сообщений в БД CMS на соответствие схеме в коде
# TODO Программист -- По коду понять, что бот отправит пользователю, не заглядывая в БД
# TODO Программист -- Выкатить на сервер код, к которому ещё нет готовых текстовок
# TODO Программист -- Заменить набор текстовок для старого стейта
# TODO Программист -- Шаблонизировать текстовку
# TODO Программист -- Исключить из схемы отдельные локали для отдельных текстовок
# TODO Программист -- Добавить в схему текстовку с дополнительными локалями
# TODO Программист -- Отлаживать бота с использованием placeholders вместо полновесных текстовок
# TODO Контент-менеджер -- По схеме понять, какой смысл программист вкладывал в текстовку
# TODO Контент-менеджер -- Отредактировать одну и ту же текстовкe состояний для разных версий схем
# TODO Контент-менеджер -- Провероить все ли текстовки заведены в БД, что нужны для обновления ПО
# TODO Контент-менеджер -- Добавить в бота состояния и текстовки, не предусмотренные схемой сообщений от ПО


# TODO Система должна защищать от опасных действий
# - Контент-менеджер удалил текстовку, на которую рассчитывает код
# - Контент-менеджер удалил кнопку, на которую рассчитывает код
# - Контент-менеджер поменял для кнопки `action`, на которую рассчитывает код
# - Контент-менеджер удалил целиком клавиатуру, на которую рассчитывает код
# - Контент-менеджер перенести изменения из текстовок для старой схемы в текстовки новой
# - Контент-менеджер занял кастомным стейтом тот же локатор, на который рассчитывает новый
# - Администратор -- При обновлении ПО затёрли изменения в текстовках от контент-менеджеров
# - При обновлении ПО забыли добавить текстовку в БД
# - Администратор -- Обновлённая версия чат-бота "прицепилась" к незащищённой схеме
# - Программист -- Поменял схему контекста для старой текстовки
# - PM -- Подтянуть текстовки с production БД
# - PM -- Допилить текстовки в dev-окружении не касаясь кода
# - Программист -- зарегистрировать новые стейты после генерации схемы сообщений
# - Удаление кастомного стейта, когда на нём "застряло" много пользователей


# Программист -- Добавить кастомный виджет
#   С кастомным виджетом в админке
#   Виджет, требующий хранения в облаке файлов, аля галарея в Tg




# TODO Программист -- Описать в коде схему необходимых текстовок c контекстами для шаблонизации
# TODO Программист -- Запросить текстовку из БД по указанной схеме
# TODO Программист -- Запустить бота в отладочном без комплекта текстовок в БД
# TODO Программист -- выбор схемы сообщений для бота при запуске на сервере


# Программист -- Вложить описание схемы сообщений внутрь того стейта чат-бота, где они используются


# TODO Что делать, если после шаблонизации текстовка окажется пустой? Исключить её из списка отренденных сообщений? Подставить какой-то placeholder ?


# TODO Контент-менеджер -- Получить справку по шаблонизатору
#   На китайском
#   На русском

# TODO Контент-менеджер -- Получить справку по разметке Telegram
#   https://core.telegram.org/bots/api#markdown-style
#   На китайском
#   На русском

# TODO Конент-менеджер -- Проверить ошибки шаблонизации при редактировании в админке

# TODO В редактор в админке добавить кнопки
# [inline URL](http://www.example.com/)
# [inline mention of a user](tg://user?id=123456789)
# `inline fixed-width code`


# TODO Контент-менеджер -- Отредактировать текстовку

# TODO Суперпользователь -- Управлять правами на работу с текстовками через админку


#function Контент-менеджер -- Отправить себе тестовое сообщение
#story Markdown style
#story Markdown V2 style
#story С подстановкой переменных в шаблон
#story Отправить всю цепочку сообщений, привязанную к стейту
#story Нахожусь в админке
#extension Текст ещё не сохранён в БД
#extension Для текстовки в БД ещё нет стейта
#story Я сам ещё не общался с ботом
#exclusion Отправить другому пользователю, а не себе
